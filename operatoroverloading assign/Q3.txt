//3) Given
//class Module1
//{
//	int duration;
//	public:
//		Module1(int k)
//		{
//			duration=k;
//		}
//};
//class Module2
//{
//	int duration;
//	public:
//		Module2(int k)
//		{
//			duration=k;
//		}
//};		
//write a global function "check" which will take 2 modules (i.e. Module1 and Module2 ) 
//and check whether Modules are same or not.
//call this "check" function from main function.	
#include<iostream>
using namespace std;
class Module2;
class Module1
{
	int duration;
	public:
		Module1(int k)
		{
			duration=k;
		}
friend bool check(Module1&, Module2&);
};

class Module2
{
	int duration;
	public:
		Module2(int k)
		{
			duration=k;
		}
		friend bool check(Module1&, Module2&);
};		
bool check(Module1 &ref1, Module2 &ref2)
{
	return ref1.duration=ref2.duration;
}
void main()
{
	Module1 m1(5);
	Module2 m2(5);
	cout<<check(m1,m2)<<endl;

}